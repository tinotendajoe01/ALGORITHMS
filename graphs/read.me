
In this section, we will delve into non-linear data structures such as graphs. We will examine the core concepts and common uses of these structures.
 You may not be aware, but you are likely already utilizing programs that employ graphs and trees. 
 For example, if you want to find the quickest route from your job to your house, graph algorithms can provide the answer!
 We will explore this and other interesting problems in this article.

##Graphs Basics
A graph is a data structure where a node can have zero or more adjacent elements
The connection between two nodes is called edge. Nodes can also be called vertices

The degree is the number of edges connected to a vertex. 
If the edges are bi-directional, then we have an undirected graph. If the edges have a direction, then we have a directed graph or di-graph for short. 
You can think of it as a one-way street (directed) or two-way street (undirected)

A graph can have cycles, which means you could get the same node more than once. The graph without cycles is called acyclic graph.

Not all vertices have to be connected in the graph. You might have isolated nodes or even separated subgraphs. If all nodes have at least one edge, then we have a connected graph.
 When all nodes are connected to all other nodes, then we have a complete graph.


##Graph Applications
When edges have values/cost assigned to them, we say we have a weighted graph.
 If the weight is absent, we can assume itâ€™s 1

Weighted graphs have many applications depending on the domain where you need to solve a problem. To name a few:

#Airline Traffic 

Node/vertex = Airport
Edges = direct flights between two airports
Weight = miles between two airports

#GPS Navigation

Node = road intersection
Edge = road
Weight = time required to go from one intersection to another

#Networks routing

Node = server
Edge = data link
Weight = connection speed

#In general, graphs have many real-world applications like:

Electronic circuits
Flight reservations
Driving directions
Telcom: Cell tower frequency planning
Social networks. E.g., Facebook uses a graph for suggesting friends
Recommendations: Amazon/Netflix uses graphs to make suggestions for products/movies
Graphs help to plan the logistics of delivering goods

##Representing graphs
There are two primary ways of representing a graph:

#Adjacency list
#Adjacency Matrix

Breadth-First Search (BFS):
Breadth-First Search is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a 'search key') and explores the neighbor nodes first, before moving to the next level neighbors.



   
Depth-First Search (DFS):   
Depth-First Search is an algorithm for traversing or searching tree or graph data structures. It starts at the root node and explores as far as possible along each branch before backtracking. The DFS algorithm traverses down a path, one level at a time, until it reaches a leaf node or a dead end before backtracking to explore other paths in the tree/graph structure.

// JavaScript code example for Depth-First Search: 
